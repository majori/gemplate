package main

import (
	"flag"
	"io/ioutil"
	"log"
	"os"
	"strings"

	p "github.com/majori/gemplate/src/parser"
	"github.com/majori/gemplate/src/parser/simplify3d"
	"github.com/majori/gemplate/src/template"
)

type Delimiter struct {
	Left  string
	Right string
}

type Arguments struct {
	Path      string
	Delimiter Delimiter
}

func parseArguments() Arguments {
	flag.Parse()

	return Arguments{
		Path:      flag.Arg(0),
		Delimiter: Delimiter{"{{", "}}"}, // TODO: Get delimiters from arguments
	}
}

func getGCode(path string) *string {
	bytes, err := ioutil.ReadFile(path)
	if err != nil {
		log.Fatal(err)
	}
	source := string(bytes)
	return &source
}

func selectParser(source *string) p.Parser {
	if strings.Contains(*source, "G-Code generated by Simplify3D(R)") {
		return simplify3d.Parse
	}

	return nil
}

func main() {
	args := parseArguments()
	source := getGCode(args.Path)

	parser := selectParser(source)

	if parser == nil {
		panic("Couldn't determine correct parser for the G-Code")
	}

	settings, states := parser(source)

	tmpl := template.New(source)
	tmpl.PreProcess(states)
	tmpl.Execute(os.Stdout, settings)
}
